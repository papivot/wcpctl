#!/usr/bin/env python3
#
# “Copyright 2021 VMware, Inc.”
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
# and associated documentation files (the "Software"), to deal in the Software without restriction, 
# including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
# and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
# subject to the following conditions:
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
# LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

from wcp_command import Command
import requests
import yaml
import argparse
import logging
import sys

def build_parser():
  parser = argparse.ArgumentParser(description='wcpctl controls for managing Supervisor Clusters in vSphere 7 with K8s. Uses YAML configuration files to setup and manage the Supervisor Cluster. Find additional information at: https://github.io/papivot/wcpctl')
  parser.add_argument('--version', action='version',version='%(prog)s v0.3')
  parser.add_argument('-s', action='store_true', dest='silent', help='Output Logging to file')
  parser.add_argument('-v', action='store_true', dest='verbose', help='Verbose mode')
  subparsers = parser.add_subparsers(help='Commands',dest='verb')

  # A create command
  create_parser = subparsers.add_parser('create', help='Create WCP object(s)')
  create_parser.add_argument('filename', action='store', help='YAML file with WCP object configuration. See examples for help')
  create_parser.add_argument('-u', action="store", dest="userid", help='VCenter userid. If not provided, will default to administrator@vsphere.local')

  # A apply command
  apply_parser = subparsers.add_parser('apply', help='Apply configuration changes to WCP object(s)')
  apply_parser.add_argument('filename', action='store', help='YAML file with WCP object configuration. See examples for help')
  apply_parser.add_argument('-u', action="store", dest="userid", help='VCenter userid. If not provided, will default to administrator@vsphere.local')

  # A delete command
  delete_parser = subparsers.add_parser('delete', help='Delete WCP object(s)')
  delete_parser.add_argument('filename', action='store', help='YAML file with WCP object configuration. See examples for help')
  delete_parser.add_argument('-u', action="store", dest="userid", help='VCenter userid. If not provided, will default to administrator@vsphere.local')

  # A describe command
  describe_parser = subparsers.add_parser('describe', help='Describe a WCP object(s)')
  # describe_parser.add_argument('filename', action='store', help='YAML file with WCP metadata info. See examples for help')
  describe_parser.add_argument('-u', action="store", dest="userid", help='VCenter userid. If not provided, will default to administrator@vsphere.local')

  describe_type_subparser = describe_parser.add_subparsers(help='Types',dest='type')
  describe_type_parser = describe_type_subparser.add_parser('wcpCluster', help='wcpCluster Object')
  describe_type_parser.add_argument('name', action="store", help="Name of the resource to describe")
  describe_type_parser = describe_type_subparser.add_parser('wcpContentLibrary', help='wcpContentLibrary Object')
  describe_type_parser.add_argument('name', action="store", help="Name of the resource to describe")
  describe_type_parser = describe_type_subparser.add_parser('wcpNamespace', help='wcpNamespace Object')
  describe_type_parser.add_argument('name', action="store", help="Name of the resource to describe")
  describe_type_parser = describe_type_subparser.add_parser('wcpRegistry', help='wcpRegistry Object')
  describe_type_parser.add_argument('name', action="store", help="Name of the resource to describe")

  return parser

if __name__ == "__main__":  
  # configure requests
  from requests.packages.urllib3.exceptions import InsecureRequestWarning
  requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

  # configure parsing opts
  parser = build_parser()

  # parse incoming args
  cmd = parser.parse_args()

  # determine log level
  if cmd.verbose is True:
    log_level = logging.DEBUG
  else:
    log_level = logging.WARNING

  # Logging config
  if (cmd.silent is True):
    logging.basicConfig(format='[%(asctime)s]:[%(levelname)s]:  %(message)s',level=log_level, filename='/tmp/wcpctl.log')
  else:
    logging.basicConfig(format='[%(asctime)s]:[%(levelname)s]:  %(message)s',level=log_level)

  if cmd.verb == "describe":
    # call alternate constructure for Command
    command = Command(cmd, None)

    # find sub-command verb (ie. create, describe, delete, apply)
    verb = getattr(command, cmd.verb)

    # run sub-command
    try:
      verb()
    except:
      logging.exception("There was an error performing the command")
      sys.exit(-1)

  else:
    # for every yaml, run the command
    with open(cmd.filename, ) as f:
      # load all yamls into list of maps
      yamldocs = yaml.load_all(f, Loader=yaml.FullLoader)
      for yamldoc in yamldocs:
        # create command object
        command = Command(cmd, yamldoc)

        # find sub-command verb (ie. create, describe, delete, apply)
        verb = getattr(command, cmd.verb)

        # run sub-command
        try:
          verb()
        except:
          logging.exception("There was an error performing the command")
          sys.exit(-1)
    

