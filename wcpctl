#!/usr/bin/env python3
#
# “Copyright 2021 VMware, Inc.”
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
# and associated documentation files (the "Software"), to deal in the Software without restriction, 
# including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
# and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
# subject to the following conditions:
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
# LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

from src.command.commands import Command
import requests
import yaml
import argparse
import logging
from src.utility.utilities import Utilities

def build_parser():
  parser = argparse.ArgumentParser(description='wcpctl controls for managing Supervisor Clusters in vSphere 7 with K8s. Uses YAML configuration files to setup and manage the Supervisor Cluster. Find additional information at: https://github.io/papivot/wcpctl')
  parser.add_argument('--version', action='version',version='%(prog)s v0.3')
  subparsers = parser.add_subparsers(help='Commands',dest='verb')

  # A create command
  create_parser = subparsers.add_parser('create', help='Create WCP object(s)')
  create_parser.add_argument('filename', action='store', help='YAML file with WCP object configuration. See examples for help')
  create_parser.add_argument('-u', action="store", dest="userid", help='VCenter userid. If not provided, will default to administrator@vsphere.local')

  # A apply command
  apply_parser = subparsers.add_parser('apply', help='Apply configuration changes to WCP object(s)')
  apply_parser.add_argument('filename', action='store', help='YAML file with WCP object configuration. See examples for help')
  apply_parser.add_argument('-u', action="store", dest="userid", help='VCenter userid. If not provided, will default to administrator@vsphere.local')

  # A delete command
  delete_parser = subparsers.add_parser('delete', help='Delete WCP object(s)')
  delete_parser.add_argument('filename', action='store', help='YAML file with WCP object configuration. See examples for help')
  delete_parser.add_argument('-u', action="store", dest="userid", help='VCenter userid. If not provided, will default to administrator@vsphere.local')

  # A delete command
  describe_parser = subparsers.add_parser('describe', help='Describe a WCP object(s)')
  describe_parser.add_argument('filename', action='store', help='YAML file with WCP metadata info. See examples for help')
  describe_parser.add_argument('-u', action="store", dest="userid", help='VCenter userid. If not provided, will default to administrator@vsphere.local')

  return parser

if __name__ == "__main__":
  # Logging config
  logging.basicConfig(format='%(levelname)s:%(asctime)s:%(message)s',level=logging.DEBUG)
  
  # configure requests
  from requests.packages.urllib3.exceptions import InsecureRequestWarning
  requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

  # configure parsing opts
  parser = build_parser()

  # parse incoming args
  cmd = parser.parse_args()

  # for every yaml, run the command
  with open(cmd.filename, ) as f:
    yamldocs = yaml.load_all(f, Loader=yaml.FullLoader)
    for yamldoc in yamldocs:
      command = Command(cmd, yamldoc)
      verb = getattr(command, cmd.verb)
      verb()


